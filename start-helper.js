const { spawn, spawnSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const ngrok = require('ngrok');
const figlet = require('figlet');
const dotenv = require('dotenv');
const chalk = require('chalk');
const kill = require('tree-kill');
const _ = require('lodash');

dotenv.config();

/**
 * This script provide a cross-platform way for starting npm process in child directory.
 *
 * Usage: node start-helper.js [server|client|mobile|test|install-children]
 *
 */

const options = [
  {
    name: 'server',
    command: 'npm',
    arguments: ['start'],
    workingDirs: 'server',
    message: 'Starting API server...'
  },
  {
    name: 'client',
    command: 'npm',
    arguments: ['start'],
    workingDirs: 'client',
    message: 'Starting web client...'
  },
  {
    name: 'mobile',
    command: 'npm',
    arguments: ['start'],
    workingDirs: 'mobile',
    message: 'Starting mobile...'
  },
  {
    name: 'test',
    command: 'npm',
    arguments: ['run', 'test'],
    workingDirs: ['server'],
    message: 'Running tests for'
  },
  {
    name: 'install-children',
    command: 'npm',
    arguments: ['install'],
    workingDirs: ['server', 'client', 'mobile'],
    message: 'Installing dependencies for'
  }
];

const start = () => {
  if (process.argv.length !== 3) {
    throw new Error(`[-] Invalid command. Please specify the argument`);
  }

  let command = _.find(options, opt => {
    if (opt.name === process.argv[2]) {
      return opt;
    }
  });
  if (!command) {
    throw new Error(`[-] Invalid argument "${process.argv[2]}"`);
  }

  if (command.name === 'mobile') {
    runMobile(command);
  } else {
    process.exit(run(command));
  }
};

const run = command => {
  const cmd = command.command;
  if (_.isArray(command.workingDirs)) {
    status = 0;
    command.workingDirs.forEach(dir => {
      const opts = { cwd: dir, shell: true, stdio: 'inherit' };
      console.log(chalk.cyan(`\n[*] ${command.message} ${dir}...\n`));
      const child = spawnSync(cmd, command.arguments, opts);
      status += child.status;
    });
    return status;
  } else {
    const opts = { cwd: command.workingDirs, shell: true, stdio: 'inherit' };
    console.log(chalk.cyan(`[*] ${command.message}`));
    return spawn(cmd, command.arguments, opts);
  }
};

const runMobile = command => {
  const apisDir = path.resolve(__dirname, './mobile/src/store/apis');
  const prodApiFile = 'api.prod.js';
  const devApiFile = 'api.dev.js';

  console.log(chalk.cyan('[*] Creating Ngrok tunnel...'));

  /**
   * Use ngrok to create public URL for server API. Then assign this public URL to
   * axios instance's baseURL in the file `mobile/src/store/apis/api.dev.js`.
   * By default, the `api.dev.js` does not exist, create one by clone api.prod.js.
   * The `api.dev.js` is not committed to the repo.
   */
  ngrok
    .connect({ proto: 'http', addr: process.env.SERVER_PORT, bind_tls: false })
    .then(ngrokUrl => {
      let content = fs.readFileSync(`${apisDir}/${prodApiFile}`, 'utf-8');
      content = content.replace(/baseURL.*/, `baseURL: '${ngrokUrl}/api'`);
      content = addWarningHeader(content);
      fs.writeFileSync(`${apisDir}/${devApiFile}`, content);

      console.log(
        chalk.greenBright(
          `\n[+] Ngrok forwarding: ${ngrokUrl} ==> http://localhost:${process.env.SERVER_PORT}`
        )
      );
      console.log(
        chalk.greenBright(`[+] Created the file "${apisDir}/${devApiFile}"\n`)
      );

      const mobileProcess = run(command);

      // The Ngrok URL will be expired after 8 hours
      setTimeout(() => {
        kill(mobileProcess.pid);
        printExpiredUrlMessage(ngrokUrl);
      }, 8 * 60 * 60 * 1000); // 8 hours
    });
};

const printExpiredUrlMessage = ngrokUrl => {
  const artText = figlet.textSync('Ngrok URL expired', { font: 'Big' });
  console.log(chalk.red(`\n\n${artText}`));
  console.log(chalk.red(`\n[-] The ngrok URL "${ngrokUrl}" is expired`));
  console.log(chalk.red(`[-] The mobile server is killed`));
  console.log(chalk.cyan('\n[*] Please press Ctrl + C to exit'));
  console.log(chalk.cyan('[*] Then, run `npm start` or `npm run mobile`\n'));
};

const addWarningHeader = content => {
  return (content = `/**
*
* DO NOT MODIFY THIS FILE
*
* This file is automatically generated by the script "${path.basename(
    __filename
  )}".
* Please see "${__filename}" for more details.
*
*/\n\n${content}`);
};

start();
